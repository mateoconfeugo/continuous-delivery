{"name":"Continuous-delivery","tagline":"uses of configuration management and clojure to develop and deploy in the cloud","body":"continuous-delivery\r\n===================\r\n\r\n#  Provisioning, Developing, Releasing, Deploying, Maintaining \r\n\r\n## How to be a one armed paper hanger\r\nUsing pallet, lein, vmfest, expections and clj-driver to automate your development provisioning release deployment testing system admin stuff especially if running a web based service.\r\n\r\n## What is my Approach?\r\nBy effectively combining the various use of clojure libraries one can eliminate much of the drudgery of developing, testing, releasing, deploying and maintaining software\r\n\r\n## What are the features that make that happen\r\n* Provide major components of a continuous delivery system\r\n* Programmatically provision system resources\r\n* Run your system of many servers on different providers  via simple single command line commands\r\n* Automated end to end testings\r\n* Test your system in the different computing environments with real servers and real web browsers\r\n* Organize and automate your common tasks in a easily reusable way.\r\n\r\n## Pieces\r\n* Clojure\r\n* Pallet\r\n* Lein\r\n* Vmfest\r\n* Expectations\r\n* clj-driver\r\n\r\n### Clojure?\r\nIts a lisp based programming language that runs on the java virtual machine and it takes the form of a java library so all sorts of interop is possible and pretty easy.  Clojure does demand you raise your game and pays you richly for doing so.  Clojure is a very powerful pragmatic language thats not very dogmatic. \r\n\r\n### What is pallet?\r\n\r\nPallet is platform for agile and programmatic automation of infrastructure in the cloud, on server racks or directly on virtual machines. Pallet provides cloud provider and operating system independence, and allows for an unprecedented level of customization.\r\nPallet is a clojure libary that compiles DSL functions  down to a set shell commands which are run across an ssh connection.\r\n\r\nPallet Concepts\r\nThe Node\r\nNode Specs\r\nThe Computing Service Provider\r\nGetting Setup\r\nAccess \r\nControlling your environment\r\nServer Specs\r\nGroup Specs\r\nOperations\r\nConverge\r\nLift\r\nCrates\r\nActions\r\n\r\n### What is lein?\r\nLeiningen is the easiest way to use Clojure. With a focus on project automation and declarative configuration, it gets out of your way and lets you focus on your code. lein is the command line implemenation tool of the leiningen project.\r\n\r\n### Lein concepts\r\n### Plugins\r\n\r\n### What is vmfest?\r\nVMFest is a PalletOps project to turn VirtualBox into a light-weight cloud provider. This is very useful for when developing cloud automation. VirtualBox's Virtual Machines (VMs) boot very quickly (seconds), so why not take advantage of it?\r\nVMFest takes the form of a library, and you can use it as a toolkit to create your own virtualization environments.\r\n\r\n### What is clj-driver\r\nThis is a Clojure library for driving an actual web browser using Selenium-WebDriver as the backend. This allows you to acturatelly run simulation of user interations with your application.  Provides higher-level Clojure functions to make interacting with the browser easier.\r\n\r\n### What is expectations \r\nexpectations is a minimalist's testing framework\r\nSimply require expectations and your tests will be run on JVM shutdown.\r\nWhat you are testing is inferred from the expected and actual types\r\nStacktraces are trimmed of clojure library lines and java.lang lines\r\nFocused error & failure messages\r\n\r\n# How it works together to make your life easier\r\n\r\n## lein pallet plugin\r\nA leiningen plugin for running pallet tasks for a pallet deployment project.\r\n\r\n### How to\r\n\r\nMake a Crate\r\nPass arguments to converge/lift operations\r\n\r\n## Release/Deploy/Maintain on the following conceptal system environments\r\n### Locally - dev\r\n### On virtual machines  running locally - dev-qa\r\n### On cloud test servers\r\n### On cloud QA servers\r\n### On cloud production blue\r\n### On cloud production green\r\n\r\n## lein expectations\r\n\r\nA leiningen plugin to make running tests written using expectations library.\r\n\r\n## lein autoexpect \r\n\r\nLeiningen plug-in for automatically running expectations whenever your Clojure project's source changes.\r\n\r\n# Organize\r\n\r\nHow you organize all this is key \r\n\r\n## [project-name].nodes.[domain-of-concern]\r\n## [project-name].servers.[domain-of-concern]\r\n## [project-name].groups.[domain-of-concern]\r\n\r\n# Examples of the different operations \r\n\r\n##  lein pallet  converge monitoring.groups.monitoring/monitoring 2 -P :vmfest\r\n\r\nCreate 2 virtual box instances of the node described in the ~/.pallet/services/vmfest.clj file and name them according to the group spec referred via its namespace. \r\n\r\n## lein pallet  lift monitoring.groups.monitoring/monitoring  -P :vmfest\r\n\r\nApply the server-specs to the specified group of existing nodes\r\n\r\n##  lein pallet  converge monitoring.groups.monitoring/monitoring 0 -P :vmfest\r\n\r\nTeardown the system\r\n##  lein pallet  converge monitoring.groups.monitoring/monitoring 1 -P :qa-cloud\r\n\r\ncreates 1 node in the cloud with a qa node and installs the monitoring group specification \r\n\r\n# Testing aspect\r\n\r\nTests can spin up the system in the desired environment and have control the web browser\r\nto perform actions against the system then check the various pieces to test for the desired\r\naffect. Using autoexpect you can always be running your tests as you run your system in \r\na local environment or on virtual boxes.  Since pallet is just a library its very easy to\r\nprogrammaticaly do whatever.\r\n\r\n# Typical system\r\n*  Load balancer ???\r\n*  Web server proxy (nginx)\r\n*  Database server (mysql)\r\n*  Configuration Server (zookeeper)\r\n*  File Server (nfs)\r\n*  Application Server wine-celler.jar\r\n\r\n# System Admin Task Areas\r\n\r\n Server specifications: These are the servers that make up a \r\n onlines physical presence\r\n Things to specify\r\n1. Users and Groups\r\n2. Application and 3rd Party Packages\r\n3. Cronjobs\r\n4. Services\r\n5. Files\r\n6.  Symbolic Links\r\n\r\n\r\n# What files need to be put in place\r\n## Application libraries\r\n## Startup and supervise scripts\r\n## Third party dependencies\r\n## CMS published files\r\n## configuration files\r\n\r\n# Provisioning scenarios\r\nThe software is run several different environments\r\n\r\n## DEVELOPMENT\r\n\r\nEvery thing runs local on the developers single box.   The testing\r\nsuite is run from the same box.  This scenario is what is used when\r\nthe developer has created a feature branch and working locally  where\r\nthey can't do any damage.   All the java dependencies are satisfied\r\nusing a local maven repository.  This scenario employs  lein\r\nautoexpect plugin so that the testing suite is always running.\r\n\r\n## DEV QA\r\nEverything is checked out and built from scratch on the host and deployed from there\r\nto virtual box machines the host spins to  simulate the production\r\ninfrastructure  the various parts of the system.   The host then runs\r\nthe acceptance tests against the virtual system before the feature\r\nbranch is merged back into the  development branch.  Then the\r\ndevelop branch publishes the feature into github.\r\n\r\n## QA RELEASE\r\nTesting scenarios can be run on  the cloud hosted node/box/machine.\r\nThe ops/qa  starts is process of getting, building, package,\r\nprovisioning and deploying  when a release is started.  The ops/qa\r\nserver will then run the acceptance tests against against the system\r\nit just spun up.  \r\n\r\n When the acceptance test pass its time to finish the release.  \r\n\r\n* This will mean the release branch is merged into develop and into master\r\n* The master branch is tagged\r\n* The release branch is removed\r\n* The newly spun up QA environment is now the blue/green environment depending on what production is\r\n\r\n## PRODUCTION RELEASE\r\nThe overall idea is the traffic will slowly be shunted from the\r\nprevious releases prod environment to the environment that was spun up\r\nin the QA RELEASE.  When it deemed save the ratio of resources in\r\nshifted from the previous release production environment to the new\r\nrelease and the new releases color is now set to production.  Then all\r\nthe traffic is shunted to the new release and the old environment\r\nsticks around with all  the system now running on minimal resource.\r\nAnd will exist until the next  new release.  The only thing that\r\nneeds to be running is probably the databases that now are the\r\nreplication slaves\r\n\r\ncustomers can choose between sharing resources (less\r\nexpensive) or having their own dedicated servers in the cloud\r\n\r\n\r\n##  ASSETS\r\n### Databases\r\n### Shared amongst clients\r\n### Internal\r\n###Online Servers\r\n\r\n## CUSTOMER ASSETS\r\n\r\n\r\n\r\nAll the servers that make up system can be run as any user\r\n\r\n# DEVELOPMENT\r\n\r\nNEW DEVELOPMENT SETUP ON EXISTING NODE (developer laptop)\r\n* Checkout project and publish cms resources to a pre-existing box (node)\r\n* This will require a pallet crate that manipulates bricolage\r\n* Checkout Git\r\n* determine what user to run under\r\n\r\n# TEST\r\nAll These scenarios will have to check out the source and build the\r\nindividual pieces from scratch.  These parts are then used  in the\r\nfollowing TEST scenarios\r\n\r\n## COMPLETE SYSTEM RUNNING LOCALLY  SHARED LIBRARIES\r\n\r\nCONDITIONS Requirements\r\n* All the java servers are bundled up in jar file and uses the dependencies in the local .m2 repository\r\n* Each server running as a unique unix user but part of a common group\r\n* All acceptance, component, and unit test can run  without any internet connection\r\n\r\n# COMPLETE SYSTEM RUNNING LOCALLY  UBERJARS\r\n* All the java servers are bundled up in single file standalone uberjars\r\n\r\n# COMPLETE SYSTEM RUNNING ON LOCALLY HOSTED VIRTUAL MACHINES\r\n\r\n# INDIVIDUAL SERVERS AND DEPENDENCIES RUNNING LOCALLY\r\n\r\n# INDIVIDUAL SERVERS AND DEPENDENCIES RUNNING ON LOCALLY HOSTED VIRTUAL MACHINES\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}